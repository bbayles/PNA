#!/bin/bash
#
# "$Id$"
#
#  Startup/shutdown script for the Passive Network Appliance (PNA).
#
#  chkconfig: 2345 90 10
#  description: Startup/shutdown script for the Passive Network \
#               Appliacte (PNA).

# PNA configuration
BASE="/home/mjschultz/pna" # Base directory for PNA module
PNA_IFACE="eth0"           # Interface for PNA to listen on
PNA_PREFIX="192.168.0.0"   # IP Prefix to watch
PNA_MASK="255.255.0.0"     # Network Mask to watch
PNA_LOGDIR="${BASE}/logs"  # Directory to store log files

# Advanced PNA configuration
PNA_FLOWPROCS=(7 5)        # Processors for flow processing (not real-time)
PNA_MONPROCS=(0 2 4 6)     # Processors for userspace routines

# # # # # # # # # # # # # # # # # # # # # # # # # #
#  Nothing below this point should need to change #
# # # # # # # # # # # # # # # # # # # # # # # # # #
SERVICE=pna

# Source function library
. /etc/init.d/functions

PNA_MODULE="${BASE}/module/pna.ko"      # Name of kernel module
PNA_MONITOR="${BASE}/user/user_monitor" # Name of logging program
PNA_ALERTS="${BASE}/user/user_alerts"   # Name of alerts program

# Program Locations
IFCONFIG="/sbin/ifconfig"
INSMOD="/sbin/insmod"
RMMOD="/sbin/rmmod -w"
LSMOD="/sbin/lsmod"

ip2hex () {
    IP=$1
    printf "0x%02x%02x%02x%02x\n" $(echo "$IP" | sed "s/\./ /g")
}

start () {
    PARMS=$1

    # don't want irqbalance messing with interrupts
    service irqbalance stop

    echo -n $"Starting $SERVICE: "

    if [ ! -z "$PARMS" ] ; then
        echo -n "($PARMS)"
    fi

    # Turn prefix and mask to hex values
    PNA_PREFIX=$(ip2hex "$PNA_PREFIX")
    PNA_MASK=$(ip2hex "$PNA_MASK")

    # Make sure PNA interface(s) are up
    echo
    for iface in ${PNA_IFACE/,/ } ; do
        ${IFCONFIG} ${iface} up
        ${IFCONFIG} ${iface} promisc

        # Set CPU <-> IRQ affinity for iface for flow monitors
        IRQS=$(awk -F: '/'${iface}'[^\n]/{ print $1 }' /proc/interrupts)
        if [ -z "$IRQS" ] ; then
            IRQS=$(awk -F: '/'${iface}'/{ print $1 }' /proc/interrupts)
        fi

        for irq in $IRQS ; do
            affinity=$((1 << ${PNA_FLOWPROCS[$irq%${#PNA_FLOWPROCS[@]}]}))
            affinity=$(printf "%x" $affinity)
            name=$(basename  /proc/irq/$irq/${iface}*)
            echo -e "\t$name ($irq) affinity $affinity"
            echo $affinity > /proc/irq/$irq/smp_affinity
        done
    done

    # load the module
    ARGS="$PARMS pna_iface=\"$PNA_IFACE\""
    ARGS="$ARGS pna_prefix=$PNA_PREFIX"
    ARGS="$ARGS pna_mask=$PNA_MASK"
    ${INSMOD} ${PNA_MODULE} $ARGS
    RETVAL=$?

    # log the current interrupt counts
    date +%s.%N >> irq_count.start
    grep "\(${PNA_IFACE/,/\|}\)" /proc/interrupts >> irq_count.start

    # make sure we have some place to save log files
    mkdir -p "$PNA_LOGDIR"

    # start the logging monitor(s)
    PID_LIST=""
    rm -f verbose-*.log
    i=0
    for f in /proc/${SERVICE}/*; do
        ARGS="-v -d $PNA_LOGDIR"
        nohup ${PNA_MONITOR} $ARGS $f >> verbose-$(basename $f).log 2>&1 &
        PID=$!
        affinity=${PNA_MONPROCS[$i%${#PNA_MONPROCS[@]}]}
        i=$(($i+1))
        /bin/taskset -cp $affinity $PID > /dev/null 2>&1
        echo -e "\tuser_monitor ($PID) affinity $(/bin/taskset -p $PID | awk '{print $6}')"
        PID_LIST="$PID_LIST $PID"
        RETVAL=$(($RETVAL+$?))
    done

    # start the alerts monitor
    # TODO...

    # in theory I should add entry to cron...
    
    # finish up with script-y stuff
    [ $RETVAL = 0 ] && touch /var/lock/subsys/${SERVICE}
    [ $RETVAL = 0 ] && echo $PID_LIST > /var/run/${SERVICE}.pids
    [ $RETVAL = 0 ] && success || failure
    echo

    return $RETVAL
}

stop () {
    echo -n $"Stopping $SERVICE: "

    # make sure there is something to stop
    if [ ! -f /var/lock/subsys/${SERVICE} ] ; then
        failure
        echo 
        return
    fi

    # log the current interrupt counts
    date +%s.%N >> irq_count.stop
    grep "\(${PNA_IFACE/,/\|}\)" /proc/interrupts >> irq_count.stop

    # in theory I should remove entry from cron...

    # kill all the monitors and alerts
    kill $(cat /var/run/${SERVICE}.pids)

    # unload the module
    ${RMMOD} ${PNA_MODULE}
    RETVAL=$?

    for iface in ${PNA_IFACE/,/ } ; do
        # unset CPU affinities
        for f in /proc/irq/*/${iface}*/../smp_affinity ; do
            cat /proc/irq/default_smp_affinity > $f
        done

        # Take down PNA interface
        ${IFCONFIG} ${iface} down
    done

    # End with script-y stuff
    [ $RETVAL = 0 ] && rm -f /var/lock/subsys/${SERVICE}
    [ $RETVAL = 0 ] && rm -f /var/run/${SERVICE}.pids
    [ $RETVAL = 0 ] && success || failure
    echo

    service irqbalance start

    return $RETVAL
}

case $1 in
    start)
        start $2
    ;;
    stop)
        stop
    ;;
    restart)
        stop
        start $2
    ;;
    status)
        ${LSMOD} | grep ${SERVICE} > /dev/null
        RETVAL=$?
    ;;
    *)
        echo $"Usage: $SERVICE {start|stop|restart|status}"
        exit 3
esac

exit $RETVAL
